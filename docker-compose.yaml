services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 20s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "${SCHEMA_REGISTRY_PORT}:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    restart: unless-stopped

  flink-jobmanager:
    build:
      context: ./src/flink
      dockerfile: Dockerfile
    container_name: flink-jobmanager
    ports:
      - "8081:8081"
    volumes:
      - ./flink/flink-config:/flink/config
      - ./jars/flink-sql-connector-kafka-3.4.0-1.20.jar:/opt/flink/lib/flink-sql-connector-kafka-3.4.0-1.20.jar
    environment:
      FLINK_PROPERTIES: "jobmanager.rpc.address: flink-jobmanager"
    command: jobmanager
    restart: unless-stopped

  flink-taskmanager:
    build:
      context: ./src/flink
      dockerfile: Dockerfile
    container_name: flink-taskmanager
    depends_on:
      flink-jobmanager:
        condition: service_healthy
    environment:
      FLINK_PROPERTIES: "jobmanager.rpc.address: flink-jobmanager"
    command: taskmanager
    restart: unless-stopped

  airflow-service:
    build:
      context: ./src/airflow
      dockerfile: Dockerfile
    environment:
      - PYARROW_VERSION=${PYARROW_VERSION}
    ports:
      - "${AIRFLOW_PORT}:8080"
    volumes:
      - ./src/airflow/dags:/usr/local/airflow/dags
    command: ["airflow", "webserver"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${AIRFLOW_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  postgres:
    image: postgres:latest
    container_name: sports
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${PGADMIN_PORT}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped

  consumer:
    build:
      context: ./src/kafka/consumer
      dockerfile: Dockerfile
    container_name: kafka-consumer
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
      POSTGRES_HOST: sports
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: ["./start_services.sh"]
    restart: on-failure

  producer:
    build:
      context: ./src/kafka/producer
      dockerfile: Dockerfile
    container_name: kafka-producer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
    command: ["python", "producer.py"]
    restart: on-failure

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      flink-taskmanager:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  pgadmin_data:
